##中文库名称:JSON操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|{}|JSON_创建()|JSON对象|面向过程|返回一个JSON对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|JSON.stringify(%s)|JSON_到文本()|文本型|面向过程|将对象转换为 JSON 字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_创建()|``| `对象型` | ``| 任意对象均可转换到文本 |
|JSON.parse(%s)|JSON_到对象()|对象型|面向过程|将 JSON 字符串转换为对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_到文本()|``| `文本型` | ``| 格式必须是JSON：'{"name":"John","age":30}' |
|%s[%s] = %s|JSON_添加键值(,,)||面向过程|设置对象的属性值，注 这是文本键 obj['name'] = "John"|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_到对象()|``| `对象型` | ``| 一个Json的变量 ||JSON_到对象()|``| `文本型` | ``| 例如 '中国' ||JSON_到对象()|``| `通用型` | ``| 支持任意值 |
|delete %s[%s]|JSON_删除键值(,)||面向过程|删除对象的属性，将Json.name 中的 name删除|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_添加键值(,,)|``| `文本型` | ``| 当前Json对象 ||JSON_添加键值(,,)|``| `文本型` | ``| 在Json对象中的某个成员 |
|for (let %s in %s) { |!!JSON_遍历(key,)||面向过程|对象的键值对进行遍历。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_删除键值(,)|`key`| `数值型` | `key`| 键变量， 默认为key ||JSON_删除键值(,)|``| `对象型` | ``| 一个Json变量 |
|}|""JSON_遍历结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|Object.assign(%s, ...%s)|JSON_覆盖(,)||面向过程|将一个或多个对象的属性复制到目标对象（Json）中。如果目标对象中已经存在相同的属性，则会被覆盖。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""JSON_遍历结束()|``| `` | ``| 要保留的 ||""JSON_遍历结束()|``| `` | ``| 用这个对象覆盖Json目标对象 |
|{...%s, ...%s}|JSON_合并(,)|对象型|面向过程|将多个Json中的属性合并成为一个新的JSON对象，一样的属性以后一个为主。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_覆盖(,)|``| `对象型` | ``| json格式的对象变量 ||JSON_覆盖(,)|``| `对象型` | ``| json格式的对象变量 |
|JSON.parse(JSON.stringify(%s))|JSON_复制()|对象型|面向过程|深拷贝 Json 对象，生成一个全新的对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_合并(,)|``| `对象型` | ``| 一个json对象变量 |
|Object.keys(%s)|JSON_取所有键()|数组型|面向过程|返回 Json 对象的所有属性名组成的数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_复制()|``| `对象型` | ``| 一个Json变量 |
|Object.values(%s)|JSON_取所有值()|数组型|面向过程| 对象的所有属性值组成的数组。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_取所有键()|``| `对象型` | ``| 一个Json对象变量 |
|hasOwnProperty(%s)|是否包含()|文本型|JSON对象|检查 Json 对象是否包含某个属性|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JSON_取所有值()|``| `文本型` | ``| json中的某个属性 |
### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |

======上面组件库结束======
##中文库名称:Websocket客户端

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
| new WebSocket(%s);
|Websocket连接()|Websokcet对象|面向过程|创建一个websokcet连接对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``| 例如:"ws://127.0.0.1:8888/ws" |
|addEventListener('open', %s)|连接事件()||Websokcet对象|连接成功的事件|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|Websocket连接()|``| `子程序指针` | ``| 传递一个 参数(对象型) |
|addEventListener('message', %s)|消息事件()||Websokcet对象|消息到达|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|连接事件()|``| `子程序指针` | ``| 传递一个参数(对象型)  参数中的 data 为消息数据 |
|addEventListener('close', %s)|断开事件()||Websokcet对象|与服务端断开事件|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|消息事件()|``| `子程序指针` | ``| 传递一个 参数(对象型) |
|send(%s)|发送消息()||Websokcet对象|对服务端发送消息。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|断开事件()|``| `通用型` | ``| 支持任意数据，推荐文本型。 |
|close()|断开连接()||Websokcet对象|主动断开与服务端的连接。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |

======上面组件库结束======
##中文库名称:数组操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|for(let j001 = 0; j001 < %s.length; j001++){|!!数组_循环(,)||面向过程|支持 返回 跳出循环 到循环尾|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `数组型` | ``| 要遍历的数据 |||``| `文本型` | ``| 输出变量默认 j |
|%s.join(%s)|数组_转换文本(,)|文本型|面向过程|返回一个组合符号的文本|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|!!数组_循环(,)|``| `数组型` | ``| 一个数组 ||!!数组_循环(,)|``| `文本型` | ``| 数组成员连接符号 |
|%s.push(%s)|数组_加入成员末尾(,)|数值型|面向过程|返回数组长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_转换文本(,)|``| `数组型` | ``|  ||数组_转换文本(,)|``| `通用型` | ``| 支持多组 使用\\分开 |
|%s.pop()|数组_删除末一项()|对象型|面向过程| 返回移除的一项成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_加入成员末尾(,)|``| `数组型` | ``| 我就是参数备注 |
|%s.shift()|数组_删除第一项()|对象型|面向过程|删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_删除末一项()|``| `数组型` | ``| 我就是参数备注 |
|%s.unshift(%s)|数组_加入成员开头(,)||面向过程|将当前成员加入到数组的第一个成员位置中|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_删除第一项()|``| `数组型` | ``|  ||数组_删除第一项()|``| `文本型` | ``| 支持多组 使用\\分开 |
|%s.sort()|数组_排序()||面向过程|一维数组排序|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_加入成员开头(,)|``| `数组型` | ``| 我就是参数备注 |
|%s.reverse()|数组_反转顺序()||面向过程|反转数组项的顺序。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_排序()|``| `数组型` | ``|  |
|%s.slice(%s,%s)|数组_取数组范围(,,)|数组型|面向过程|截取数组的返回|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_反转顺序()|``| `数组型` | ``| 我就是参数备注 ||数组_反转顺序()|``| `数值型` | ``| 会计算进去 ||数组_反转顺序()|``| `数值型` | ``| 最后位置不会计算进去 |
|%s.splice(%s,%s)|数组_删除成员(,,)|数组型|面向过程|从数组指定位置删除指定数量的成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_取数组范围(,,)|``| `数组型` | ``| 数组对象 ||数组_取数组范围(,,)|``| `数值型` | ``| 要删除的第几项 ||数组_取数组范围(,,)|``| `数值型` | ``| 要删除的数量 |
|%s.splice(%s,%s,%s)|数组_插入成员(,,)||面向过程|对数组指定位置插入一个成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_删除成员(,,)|``| `数组型` | ``| 我就是参数备注 ||数组_删除成员(,,)|``| `数值型` | ``| 从哪里插入 ||数组_删除成员(,,)|``| `文本型` | ``| 支持多项用@隔开 |
|%s.splice(%s,%s,%s)|数组_替换成员(,,,)||面向过程|将数组中指定位置的成员进行替换为新的成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_插入成员(,,)|``| `数组型` | ``| 我就是参数备注 ||数组_插入成员(,,)|``| `数值型` | ``| 替换的索引位置 ||数组_插入成员(,,)|``| `数值型` | ``| 替换的数量 ||数组_插入成员(,,)|``| `通用型` | ``| 用于替换的成员 可以用 \\ 隔开多个 |
|%s.length|数组_取成员数()|数值型|面向过程|获取当前数组一共有多少个成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_替换成员(,,,)|``| `数组型` | ``| 数组变量，从这个数组中获取成员数量 |
|%s.concat(%s)|数组_追加(,)||面向过程|将一个新的数组加入到当前数组中|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_取成员数()|``| `数组型` | ``| 我就是参数备注 ||数组_取成员数()|``| `通用型` | ``| 支持\\多个数组或者 成员 |
|Phaser.Utils.Array.GetRandom(%s)|数组_取随机成员()|对象型|面向过程|这个命令是游戏引擎内部命令|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_追加(,)|``| `数组型` | ``| 数组对象 |
|%s.splice(0,%s.length)|数组_清空(,)||面向过程|清空当前数组 |
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|数组_取随机成员()|``| `数组型` | ``| 数组对象自身 ||数组_取随机成员()|``| `数组型` | ``| 数组对象自身 |
|}|""数组_循环结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|%s = %s.find(function(element, index, arr) {|!!数组_寻找(,)|对象型|面向过程|寻找数组中的某个值 找到后返回这个结果|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""数组_循环结束()|``| `通用型` | ``| 注：这是变量，请必须预先申明 然后传入 ||""数组_循环结束()|``| `数组型` | ``| 数组对象 |
|})|""数组_寻找结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|%s=%s.filter(function(element) {|!!数组_过滤(,)|数组型|面向过程|过滤函数会被传入数组中的每个元素，然后根据函数返回值的真假来决定是否将该元素包含在新数组中。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""数组_寻找结束()|``| `数组型` | ``| 必须预先申明这个变量 传入到这里执行后得到结果 ||""数组_寻找结束()|``| `数组型` | ``| 需要处理的数组 |
|});|""数组_过滤结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|length|成员数()|数值型|数组型|当前数组拥有多少个成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |

======上面组件库结束======
##中文库名称:文本操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|%s.length|文本_取长度()|数值型|面向过程|	返回字符串的长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``| 文本变量 |
|%s.charAt(%s)|文本_取指定位置内容(,1)|文本型|面向过程|返回指定位置的字符 注:仅返回一个字符|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取长度()|``| `文本型` | ``| 文本变量 ||文本_取长度()|`1`| `数值型` | `1`|  |
|%s.concat(%s)|文本_拼接(,)|文本型|面向过程|连接两个字符 返回新的内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取指定位置内容(,1)|``| `文本型` | ``| 拼接的内容一 ||文本_取指定位置内容(,1)|``| `文本型` | ``| 拼接的内容二 |
|%s.includes(%s)|文本_是否包含(,)|逻辑型|面向过程|检查字符串是否包含指定的子字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_拼接(,)|``| `文本型` | ``| 文本型变量 ||文本_拼接(,)|``| `文本型` | ``| 要被查询的内容 |
|%s.indexOf(%s)|文本_取字符首次位置(,)|数值型|面向过程|返回指定子字符串首次出现的位置|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_是否包含(,)|``| `文本型` | ``| 文本内容 ||文本_是否包含(,)|``| `文本型` | ``| 要检查的字符 |
|%s.indexOf(%s)|文本_取字符最后位置(,)|数值型|面向过程|返回指定子字符串最后一次出现的位置|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取字符首次位置(,)|``| `文本型` | ``| 文本变量 ||文本_取字符首次位置(,)|``| `文本型` | ``| 要检查的内容 |
|%s.replace(%s, %s)|文本_替换(,,)|文本型|面向过程|替换字符串中的某个子字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取字符最后位置(,)|``| `文本型` | ``| 文本变量 ||文本_取字符最后位置(,)|``| `文本型` | ``| 要被替换的内容 ||文本_取字符最后位置(,)|``| `文本型` | ``| 替换后的内容 |
|%s.slice(%s, %s)|文本_取内容(,,)|文本型|面向过程|提取字符串的某个部分，并返回新的字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_替换(,,)|``| `文本型` | ``| 文本变量 ||文本_替换(,,)|``| `数值型` | ``| 提取的起始位置（包含） 如果为负数，则表示从末尾开始计算的位置 ||文本_替换(,,)|``| `数值型` | ``| 是提取的结束位置（不包含）如果为负数，则表示从末尾开始计算的位置 |
|%s.split(%s)|文本_分割(,"")|数组型|面向过程|将字符串分割为数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取内容(,,)|``| `文本型` | ``| 文本变量 ||文本_取内容(,,)|`""`| `文本型` | `""`| "" 则为 逐字分割 |
|%s.substring(%s, %s)|文本_取内容Ex(,,)|文本型|面向过程|提取字符串中介于两个指定下标之间的字符 不支持负数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_分割(,"")|``| `文本型` | ``| 文本型变量 ||文本_分割(,"")|``| `数值型` | ``| 为负数，会被视为 0 ||文本_分割(,"")|``| `数值型` | ``| 不包含该位置的字符 为负数，会被视为 0 大于字符串长度，会被视为字符串长度。 |
|%s.toLowerCase()|文本_到小写()|文本型|面向过程|将字符串转换为小写|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取内容Ex(,,)|``| `文本型` | ``| 文本内容 |
|%s.toUpperCase()|文本_到大写()|文本型|面向过程|将字符串转换为大写|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_到小写()|``| `文本型` | ``| 文本内容 |
|%s.trim()|文本_删首尾空()|文本型|面向过程|去除字符串两端的空白字符|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_到大写()|``| `文本型` | ``| 文本内容 |
|%s.startsWith(%s)|文本_匹配开头(,)|逻辑型|面向过程|检查字符串是否以指定的子字符串开头|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_删首尾空()|``| `文本型` | ``| 文本内容 ||文本_删首尾空()|``| `数值型` | ``| 匹配长度 |
|%s.endsWith(%s)|文本_匹配结尾(,)|逻辑型|面向过程|检查字符串是否以指定的子字符串结尾|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_匹配开头(,)|``| `文本型` | ``| 文本内容 ||文本_匹配开头(,)|``| `文本型` | ``| 匹配长度 |
|%s.match(%s)|文本_正则匹配(,)|文本型|面向过程|使用正则表达式匹配字符串，并返回匹配结果|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_匹配结尾(,)|``| `文本型` | ``| 文本内容 ||文本_匹配结尾(,)|``| `文本型` | ``| 正则表达式 |
|%s.search(%s)|文本_正则搜索(,)|数值型|面向过程|使用正则表达式搜索字符串，并返回匹配的索引|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_正则匹配(,)|``| `文本型` | ``| 文本内容 ||文本_正则匹配(,)|``| `文本型` | ``| 正则表达式 需要 |
|%s.padStart(%s, %s)|文本_填充左侧(,,)|文本型|面向过程|在字符串开头填充指定字符，直到字符串达到指定长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_正则搜索(,)|``| `文本型` | ``| 文本内容 ||文本_正则搜索(,)|``| `数值型` | ``| 文本最终要被填充到的长度比如 5 填充内容为0 长度为 3 则结果是 003 ||文本_正则搜索(,)|``| `文本型` | ``| 要被填充的内容 例如 " "  |
|%s.padEnd(%s, %s)|文本_填充右侧(,,)|文本型|面向过程|在字符串结尾填充指定字符，直到字符串达到指定长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充左侧(,,)|``| `文本型` | ``| 文本内容 ||文本_填充左侧(,,)|``| `数值型` | ``| 文本将要填充到的长度 例如 文本 5 长度 3 填充 0 结果:500 ||文本_填充左侧(,,)|``| `文本型` | ``| 填充内容 |
|%s.repeat(%s)|文本_填充重复(,)|文本型|面向过程|将字符串重复指定次数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充右侧(,,)|``| `文本型` | ``| 要填充的内容 ||文本_填充右侧(,,)|``| `数值型` | ``| 将填充内容重复次数 |
|%s.charCodeAt(%s)|文本_取Unicode编码(,)|数值型|面向过程|返回指定位置字符的Unicode编码 范围是 0 到 65535|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充重复(,)|``| `文本型` | ``| 文本内容 ||文本_填充重复(,)|``| `数值型` | ``| 查询的位置 |
|%s.codePointAt(%s)|文本_取Unicode码点(,)|数值型|面向过程|返回指定位置字符的Unicode码点 这是一个 Unicode 扩展字符，占用两个码元|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取Unicode编码(,)|``| `文本型` | ``| 文本内容 ||文本_取Unicode编码(,)|``| `数值型` | ``| 要查询的位置 |
|length|长度()|数值型|文本型|返回字符串的长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|toString()|到文本()|文本型|文本型|将字符串对象转换为字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |
| 换行符 | `"\n"` | `文本型` | \n |

======上面组件库结束======
##中文库名称:流程操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|if(%s){|!!如果()||面向过程|if 条件判断|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``| 例如:a == 1 |
|}|""如果结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|}
else
{|##否则()||面向过程|else 必须在如果语句中使用否则异常|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|}
else if(%s)
{|#*否则如果()||面向过程|else if 在如果中使用，基于多次判断|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|##否则()|``| `文本型` | ``| 用于判断条件是否成立的语句 相等必须为 == |
|return(%s)|返回(0)|通用型|面向过程|返回当前任何对象或者数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|#*否则如果()|`0`| `通用型` | `0`| 允许返回任何内容 |
|while(%s){|!!判断循环首()||面向过程|while 当满足条件时候退出 如果不退出将永远循环可能导致程序崩溃|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|返回(0)|``| `文本型` | ``| 例如 i == 0 |
|}|""判断循环首结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|continue;|到循环尾()||面向过程|continue 在数组循环，计次循环中使用，可以跳过后面的代码逻辑到下一次循环|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|break|跳出循环()||面向过程|break 跳出循环 在计次循环，数组循环中使用|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

| for (let j001 = 0; j001 < %s; j001++){|!!计次循环首(10,i)||面向过程|for 循环指定次数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|跳出循环()|`10`| `数值型` | `10`| 要循环的次数 ||跳出循环()|`i`| `数值型` | `i`| 计次的变量 |
|}|""计次循环首结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|console.log(%s)|调试输出()||面向过程|支持连续输出多参数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""计次循环首结束()|``| `` | ``| 要输出的内容，如果在服务端中尽量输出文本 |
|

|!!时钟创建(,1000)||面向过程|创建一个循环执行的时钟|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|调试输出()|``| `时钟对象` | ``| 预先申明一个时钟指针对象 ||调试输出()|`1000`| `数值型` | `1000`| 毫秒 |
|
|""时钟创建结束()||面向过程|时钟创建设定间隔时间位置|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|clearInterval(%s)|时钟销毁()||面向过程|销毁运行的时钟。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""时钟创建结束()|``| `时钟对象` | ``| 时钟的对象 |
|structuredClone(%s)|拷贝对象Ex()|对象型|面向过程|ES2024新标准版本的深度拷贝，如果无效请用老版本 拷贝对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|时钟销毁()|``| `对象型` | ``|  |
|JSON.parse(JSON.stringify(%s))|拷贝对象()|对象型|面向过程|深度拷贝对象，修改后面对象，前面对象不会跟着改变。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|拷贝对象Ex()|``| `对象型` | ``| 要拷贝的对象 |
### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |

======上面组件库结束======
##中文库名称:网站服务操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|Go|网站_初始化()|网站服务器|面向过程|初始化一个网站服务器，无论创建多少个，都共享同一个服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

||网站_连接MySql(0,"127.0.0.1","3306","root","root","MxIDE",10,10)||面向过程|连接MYSQL数据，如有异常请查阅目录下logs日志|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始化()|`0`| `文本型` | `0`| 1 启动 0 不启动  默认 0 ||网站_初始化()|`"127.0.0.1"`| `文本型` | `"127.0.0.1"`| 数据库的ip地址一般为:"127.0.0.1" ||网站_初始化()|`"3306"`| `文本型` | `"3306"`| 数据库通讯端口 一般为 "3306" ||网站_初始化()|`"root"`| `文本型` | `"root"`| 默认为 "root" ||网站_初始化()|`"root"`| `文本型` | `"root"`| 默认为 "root" ||网站_初始化()|`"MxIDE"`| `文本型` | `"MxIDE"`| 默认为 "MxIDE" ||网站_初始化()|`10`| `数值型` | `10`| 默认 10 ||网站_初始化()|`10`| `数值型` | `10`| 默认 10  |
||网站_设置端口()||面向过程|设置当前服务器启动端口，如果启动失败可能会自动结束进程。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_连接MySql(0,"127.0.0.1","3306","root","root","MxIDE",10,10)|``| `数值型` | ``| 当前服务器的端口 |
|if(消息.url == %s){%s(ID,消息);return(0);}|网站_路由绑定(,)||面向过程|更简便的请求接口绑定方式。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_设置端口()|``| `文本型` | ``| 例如:"/index.html" ||网站_设置端口()|``| `子程序指针` | ``| &首页事件，它必须包含两个参数 ID(数值型),消息(网站消息) |
|Go|网站_初始内存()|共享内存对象|面向过程|初始化内存映射服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

||网站_连接Redis(0,"localhost","6379","123456",0,10,5)|Redis对象|面向过程|连接redis服务功能|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始内存()|`0`| `数值型` | `0`| 1 开启 0关闭 ||网站_初始内存()|`"localhost"`| `文本型` | `"localhost"`| 默认 "localhost" ||网站_初始内存()|`"6379"`| `文本型` | `"6379"`| 默认 "6379" ||网站_初始内存()|`"123456"`| `文本型` | `"123456"`| 默认 123456的 ||网站_初始内存()|`0`| `数值型` | `0`| 默认使用 0 号数据库 ||网站_初始内存()|`10`| `数值型` | `10`| 初始化连接池数量 ||网站_初始内存()|`5`| `数值型` | `5`| 当没有工作时候最低保持连接数量。 |
|Go|网站_初始房间()|房间对象|面向过程|创建房间功能|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|设置网页协议头(%s,%s,%s)|设置网页协议头(,,)||网站服务器|给客户端回复消息时候可以预先设置协议头|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始房间()|``| `数值型` | ``| 客户端ID ||网站_初始房间()|``| `文本型` | ``| 例如："Content-Type" 或 #网站_ ||网站_初始房间()|``| `文本型` | ``| 例如：".json": "application/json" |
|发送网页消息(%s,%s)|发送网页消息(,)||网站服务器|对客户端推送网页消息内容,可预先使用设置协议头来决定发送什么类型。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置网页协议头(,,)|``| `数值型` | ``| 客户端连接ID ||设置网页协议头(,,)|``| `文本型` | ``| 要推送的网页内容 |
|发送网页消息Ex(%s,%s)|发送网页消息Ex(,)||网站服务器|对客户端推送网页，该方案会直接通过文件从底层发送并不会读入到JS中|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送网页消息(,)|``| `文本型` | ``| 客户端ID ||发送网页消息(,)|``| `文本型` | ``| 当前文件路径，如果不是绝对路径则需要带上 '.' + 文件路径 |
|读入文件(%s)|读入文件()|文本型|网站服务器|从指定路径读入文件，返回内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送网页消息Ex(,)|``| `文本型` | ``| 如果是相对路径请带上 "." + 文件路径 |
|获取URL后缀(%s)|获取URL后缀()|文本型|网站服务器|例如 ad/index.html?name=5  得到 .html|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|读入文件()|``| `文本型` | ``| 传入请求地址即可 例如 消息.ulr |
|查询后缀协议(%s)|查询后缀协议()|文本型|网站服务器|在设置网页头协议时候，如果是 "Content-Type" 则可以查询目录下的 mime.json的协议值 如果没有则为空建议其他文件协议可自行添加。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取URL后缀()|``| `文本型` | ``| 例如:".html" 注意是带 . |
|取运行目录()|取运行目录()|文本型|网站服务器|获取服务端当前所在目录|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|执行SQL(%s,%s)|执行MYSQL(, )|对象型|网站服务器|通过执行SQL语句返回结果对象 当前为mysql|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取运行目录()|``| `文本型` | ``| 调用mysql的语句 如果是查询则返回结果。 ||取运行目录()|` `| `数组型` | ` `| 注意如果有值则必须前面写 ...参数值  这表示自动传参。 |
|更新业务脚本()|更新业务脚本()||网站服务器|动态将lib/业务逻辑.js文件更新到底层中避免重启服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|调用DLL( %s , %s ,%s  , %s ,%s )|调用DLL(,1,,[],[])|文本型|网站服务器|调用DLL函数返回结果，注:32位仅调用32位DLL，64同理不能交叉使用。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|更新业务脚本()|``| `文本型` | ``| 例如 "MyApi.DLL" 在服务端根目录中 ||更新业务脚本()|`1`| `文本型` | `1`| 默认转换UTF 将返回结果转换编码 1 gbk到utf 其他不转换 ||更新业务脚本()|``| `文本型` | ``| DLL中要被调用的函数名，必须存在，且大小写敏感。 ||更新业务脚本()|`[]`| `数组型` | `[]`| 参数类型 使用\\分开 例如["string"\\"int"\\"bool"] ||更新业务脚本()|`[]`| `数组型` | `[]`| ["aaa"\\1\\真] |
|发送WebSocket消息(%s,%s)|发送WebSocket消息(,)||网站服务器|仅用于回复websocket客户消息。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|调用DLL(,1,,[],[])|``| `文本型` | ``| 客户ID ||调用DLL(,1,,[],[])|``| `文本型` | ``| 消息内容编码推荐utf8 |
||路由绑定(,)||网站服务器|更简便的请求接口绑定方式。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息(,)|``| `文本型` | ``| 例如:"/index.html" ||发送WebSocket消息(,)|``| `子程序指针` | ``| &首页事件，它必须包含两个参数 ID(数值型),消息(网站消息) |
|base64编码(%s)|编码base64编码()|文本型|网站服务器|将文本内容转换到base64|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|路由绑定(,)|``| `文本型` | ``| 文本内容 |
|base64编码(%s)|编码base64解码()|文本型|网站服务器|将一段base64的内容转换成原始内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码base64编码()|``| `文本型` | ``| base64内容 |
|utf8到gbk(%s)|编码utf8到gbk()|文本型|网站服务器|将utf8的内容转换到gbk|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码base64解码()|``| `文本型` | ``| utf8内容 |
|gbk到utf8(%s)|编码gbk到utf8()|文本型|网站服务器||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码utf8到gbk()|``| `文本型` | ``| gbk内容 |
|文本到Hex(%s,%s)|编码文本到Hex(,true)|文本型|网站服务器|将一段内容转换到 FF FF格式|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码gbk到utf8()|``| `文本型` | ``| 原始内容 ||编码gbk到utf8()|`true`| `逻辑型` | `true`| 是否输出空格 |
|Hex到文本(%s)|编码Hex到文本()|文本型|网站服务器|将hex数据还原成为文本|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码文本到Hex(,true)|``| `文本型` | ``|  |
|URL编码(%s)|编码URL编码()|文本型|网站服务器|URL编码|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码Hex到文本()|``| `文本型` | ``|  |
|URL解码(%s)|编码URL解码()|文本型|网站服务器||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码URL编码()|``| `文本型` | ``|  |
|JWT生成(%s,%s)|JWT生成(,'mxide.com')|文本型|网站服务器|JWT验证系统 返回一个token值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码URL解码()|``| `对象型` | ``| 这里是一个对象变量,用于生成JWT校验对象 ||编码URL解码()|`'mxide.com'`| `文本型` | `'mxide.com'`| 一个key |
|JWT验证(%s,%s)|JWT验证(,'mxide.com')|逻辑型|网站服务器|校验客户端传递过来的值是否正确。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JWT生成(,'mxide.com')|``| `文本型` | ``| 通过JWT生成返回的值 ||JWT生成(,'mxide.com')|`'mxide.com'`| `文本型` | `'mxide.com'`| 生成时候的key |
|httpRequest(%s,%s,%s,%s,%s)|HTTP请求('GET',,'',5000,[])|对象型|网站服务器|通过HTTP请求返回请求到的结果|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JWT验证(,'mxide.com')|`'GET'`| `文本型` | `'GET'`| 'GET' 'POST' 等协议 ||JWT验证(,'mxide.com')|``| `文本型` | ``|  ||JWT验证(,'mxide.com')|`''`| `文本型` | `''`| post模式下的请求数据 注意是文本型 ||JWT验证(,'mxide.com')|`5000`| `数值型` | `5000`| 默认5000毫秒 ||JWT验证(,'mxide.com')|`[]`| `数组型` | `[]`| 一个请求协议数组对象 例如[{key:name}]  |
|延时(%s,%s)|延时执行(,)||网站服务器|延时执行某个函数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|HTTP请求('GET',,'',5000,[])|``| `数值型` | ``| 毫秒 ||HTTP请求('GET',,'',5000,[])|``| `子程序指针` | ``| 要回调的事件 |
|发送JSON消息(%s,%s)|发送WebSocket消息JSON(,)||网站服务器|向用户推送JSON消息体|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|延时执行(,)|``| `文本型` | ``| 用户ID ||延时执行(,)|``| `对象型` | ``| JSON消息对象 |
|广播消息(%s)|发送WebSocket消息JSON全体()||网站服务器|对所有在线用户发送JSON消息|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息JSON(,)|``| `对象型` | ``| 消息JSON对象 |
|写出文件(%s,%s)|写出文件(,)||网站服务器|目前仅支持文本型|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息JSON全体()|``| `文本型` | ``| 要写出的路径 ||发送WebSocket消息JSON全体()|``| `文本型` | ``| 要写出的数据 |
|获取在线人数()|获取在线人数()|数值型|网站服务器|获取在线人数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|关闭程序(%s)|程序关闭()|数值型|网站服务器|关闭指定pid进程|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取在线人数()|``| `数值型` | ``| 某个进程的pid标志 |
|执行程序(%s,%s,%s)|程序执行(,"null",false)|运行对象|网站服务器|执行一个外部程序 返回对象 包含 [错误，pid]两个成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|程序关闭()|``| `文本型` | ``| 从程序运行的路径 ||程序关闭()|`"null"`| `文本型` | `"null"`| 真则等待程序执行完毕，假则不等待。 ||程序关闭()|`false`| `逻辑型` | `false`| 慎用真模式，会阻塞其他用户执行该命令，但不阻塞消息。 |
|执行CMD(%s,%s)|执行CMD(,false)|通用型|网站服务器|执行CMD命令函数，使用完整命令字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|程序执行(,"null",false)|``| `文本型` | ``| 运行cmd命令例如:"ping www.baidu.com -n 4" 或 "start notepad.exe D:\\test.txt", ||程序执行(,"null",false)|`false`| `文本型` | `false`| 真则为等待执行完毕，假则不等待 |
|method|method()|文本型|网站消息|请求方法（如 GET、POST 等）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|url|url()|文本型|网站消息|请求的完整 URL|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|url|headers()|文本型|网站消息|请求头，键值对形式，值可能是多个|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|body|body()|文本型|网站消息|一般是post请求体内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|clientIP|clientIP()|文本型|网站消息|客户端 IP 地址|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|realIP|realIP()|文本型|网站消息|真实 IP 地址（经过代理时可能不同）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|origin|origin()|文本型|网站消息|请求来源（用于跨域请求）用于区分绑定域名|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|userAgent|userAgent()|文本型|网站消息|客户端用户代理信息（浏览器或客户端标识）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|queryParams|queryParams()|数组型|网站消息| URL 查询参数，键值对形式，值可能是多个例如 user=1&pass=2|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|添加分类(%s)|添加分类()||共享内存对象|在底层中添加一个内存分类管理|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|queryParams()|``| `文本型` | ``| 添加一个分类例如:#网站_内存分类_ |
|删除分类(%s)|删除分类()||共享内存对象|删除后分类中数据完全销毁。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|添加分类()|``| `文本型` | ``| 添加分类时候的类名，表示要删除的分类名称 |
|分类是否存在(%s)|分类是否存在()|逻辑型|共享内存对象|检查分类是否存在。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|删除分类()|``| `文本型` | ``| 要检测的类名。 |
|获取数据(%s,%s)|获取数据(,)|对象型|共享内存对象|从共享内存中获取数据|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|分类是否存在()|``| `文本型` | ``| 添加分类时候的类名 ||分类是否存在()|``| `文本型` | ``| 添加数据时候的键 |
|修改数据(%s,%s,%s,%s)|修改数据(,,,)||共享内存对象|对数据进行直接修改。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取数据(,)|``| `文本型` | ``| 表示要操作的分类名称 ||获取数据(,)|``| `文本型` | ``| 表示要操作的对象 ||获取数据(,)|``| `文本型` | ``| 表示要修改的属性名称 ||获取数据(,)|``| `通用型` | ``| 表示要设置的新值 |
|覆盖数据(%s,%s,%s)|覆盖数据(,,)||共享内存对象|对当前分类中的某个数据进行直接覆盖。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|修改数据(,,,)|``| `文本型` | ``| 表示要操作的分类名称 ||修改数据(,,,)|``| `文本型` | ``| 表示要操作的对象 ID ||修改数据(,,,)|``| `通用型` | ``| 表示要设置的新值 |
|添加数据(%s,%s,%s)|添加数据(,,)||共享内存对象||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|覆盖数据(,,)|``| `文本型` | ``| 表示要操作的分类名 ||覆盖数据(,,)|``| `文本型` | ``| 表示要添加数据的对象 ID ||覆盖数据(,,)|``| `通用型` | ``| 表示要添加的对象数据 |
|删除数据(%s,%s)|删除数据(,)||共享内存对象|删除共享内存中的数据|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|添加数据(,,)|``| `文本型` | ``| 表示要操作的分类名称 ||添加数据(,,)|``| `文本型` | ``| 表示要删除数据的对象 ID |
|获取分类所有对象(%s)|获取分类所有对象()|对象型|共享内存对象|获取当前分类所有数据。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|删除数据(,)|``| `文本型` | ``| 表示要获取对象数据的分类名称 |
|设置(%s,%s,%s)|设置(,,)||Redis对象|设置键值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取分类所有对象()|``| `文本型` | ``| 要存储的键名 ||获取分类所有对象()|``| `对象型` | ``| 一个Json对象的值 ||获取分类所有对象()|``| `数值型` | ``| 该数据多久过期。 |
|获取(%s)|获取()|对象型|Redis对象|获取值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置(,,)|``| `文本型` | ``|  |
|删除(%s)|删除()|数值型|Redis对象|删除键|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取()|``| `文本型` | ``| 设置的键 |
|存在(%s)|存在()|逻辑型|Redis对象|检查键是否存在|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|删除()|``| `文本型` | ``| 设置时候的键 |
|设置过期(%s,%s)|设置过期(,)|逻辑型|Redis对象|设置过期时间|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|存在()|``| `文本型` | ``| 设置时候的键名 ||存在()|``| `数值型` | ``| 设置这个键的数据过期时间 |
|房间设置(%s,%s)|设置房间属性(,0)||房间对象|设置房间属性（0表示无限制，其他数字表示互斥组）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置过期(,)|``| `文本型` | ``| 房间定义名称 ||设置过期(,)|`0`| `数值型` | `0`| 0表示无限制，其他数字表示互斥组 |
|加入房间(%s,%s)|加入(,)||房间对象|用户加入到指定房间。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置房间属性(,0)|``| `文本型` | ``| 用户ID ||设置房间属性(,0)|``| `文本型` | ``| 要进入的房间名 |
|离开指定房间(%s,%s)|离开(,)||房间对象|用户离开指定房间名|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|加入(,)|``| `文本型` | ``| 用户ID ||加入(,)|``| `文本型` | ``| 用户要离开的某个房间名。 |
|离开房间(%s)|离开所有()||房间对象|离开该用户所在的所有房间。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|离开(,)|``| `文本型` | ``| 用户ID |
|获取房间人数(%s)|获取房间人数()|数值型|房间对象|获取这个房间的人数。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|离开所有()|``| `文本型` | ``| 要获取的人数的房间名。 |
|获取房间用户(%s)|获取用户组()|数组型|房间对象|获取这个房间的所有用户数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取房间人数()|``| `文本型` | ``|  |
|获取用户房间(%s)|获取用户房间()|数组型|房间对象|获取该用户的所有房间列表|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取用户组()|``| `文本型` | ``| 用户ID |
|广播房间消息(%s,%s)|广播房间消息(,)||房间对象|对该房间所有人进行广播|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取用户房间()|``| `文本型` | ``| 要广播的房间名 ||获取用户房间()|``| `对象型` | ``| 消息JSON对象 |
|广播用户所有房间(%s,%s)|广播用户所有房间(,)||房间对象|通过该用户将消息广播给它所在的所有房间|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|广播房间消息(,)|``| `文本型` | ``|  ||广播房间消息(,)|``| `对象型` | ``| JSON消息 |
### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |
| 网站_内容类型 | `'Content-Type'` | `文本型` | 指定响应体的媒体类型，如 `application/json` 或 `text/html`。 |
| 网站_内容长度 | `'Content-Length'` | `文本型` | 指定响应体的字节数。 |
| 网站_内容处理 | `'Content-Disposition'` | `文本型` | 指定客户端如何处理响应体，常用于文件下载，如 `attachment; filename="file.txt"`。 |
| 网站_缓存控制 | `'Cache-Control'` | `文本型` | 控制缓存行为，如 `no-cache` 或 `max-age=3600`。 |
| 网站_过期时间 | `'Expires'` | `文本型` | 指定响应体的过期时间。 |
| 网站_重定向地址 | `'Location'` | `文本型` | 用于重定向，指定客户端应跳转的 URL。 |
| 网站_设置Cookie | `'Set-Cookie'` | `文本型` | 设置客户端的 Cookie。 |
| 网站_跨域允许来源 | `'Access-Control-Allow-Origin'` | `文本型` | 用于 CORS，指定允许访问的源。"*" 表示所有 |
| 网站_跨域允许方法 | `'Access-Control-Allow-Methods'` | `文本型` | 用于 CORS，指定允许的 HTTP 方法。 |
| 网站_跨域允许头 | `'Access-Control-Allow-Headers'` | `文本型` | 用于 CORS，指定允许的请求头。 |
| 网站_跨域暴露头 | `'Access-Control-Expose-Headers'` | `文本型` | 用于 CORS，指定客户端可访问的响应头。 |
| 网站_跨域缓存时间 | `'Access-Control-Max-Age'` | `文本型` | 用于 CORS，指定预检请求的缓存时间。 |
| 网站_认证方式 | `'WWW-Authenticate'` | `文本型` | 用于 HTTP 认证，指定认证方式。 |
| 网站_页面嵌入控制 | `'X-Frame-Options'` | `文本型` | 防止点击劫持，如 `DENY` 或 `SAMEORIGIN`。 |
| 网站_内容类型控制 | `'X-Content-Type-Options'` | `文本型` | 防止 MIME 类型嗅探，通常设置为 `nosniff`。 |
| 网站_XSS防护 | `'X-XSS-Protection'` | `文本型` | 启用或禁用浏览器的 XSS 过滤，如 `1; mode=block`。 |
| 网站_安全传输 | `'Strict-Transport-Security'` | `文本型` | 强制使用 HTTPS，如 `max-age=31536000; includeSubDomains`。 |
| 网站_引用控制 | `'Referrer-Policy'` | `文本型` | 控制 Referer 头的发送，如 `no-referrer` 或 `strict-origin-when-cross-origin`。 |
| 网站_内容安全 | `'Content-Security-Policy'` | `文本型` | 控制资源加载策略，防止 XSS 攻击。 |
| 网站_内存分类_用户 | `"users"` | `文本型` | 默认：users |
| 网站_内存分类_怪物 | `"monster"` | `文本型` | monster |
| 网站_内存分类_NPC | `"npc"` | `文本型` | npc |

======上面组件库结束======
##中文库名称:转换操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|String(%s)|到文本()|文本型|面向过程|将变量转换为字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``|  |
|%s.toString()|到文本Ex()|文本型|面向过程| 将变量转换为字符串（适用于对象和原始值）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|到文本()|``| `通用型` | ``| 任意变量 |
|Number(%s)|到数值()|数值型|面向过程|将变量转换为数字。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|到文本Ex()|``| `文本型` | ``| 例如："123" 转换到 123 |
|parseInt(%s)|到整数()|整数型|面向过程|将字符串转换为整数。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|到数值()|``| `通用型` | ``| "123.4"  到 123 或 123.5 到 123 |
|parseFloat(%s)|到浮点()|数值型|面向过程|将字符串转换为浮点数。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|到整数()|``| `文本型` | ``| "123.45" 转换为 123.45 |
|Math.abs(%s)|取绝对值()|数值型|面向过程|返回这个数的绝对值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|到浮点()|``| `数值型` | ``| 例如:-1 结果返回 1 |
|Math.ceil(%s)|取上整数()|整数型|面向过程|返回大于或等于 x 的最小整数（向上取整）。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取绝对值()|``| `数值型` | ``| 4.3 返回 5 |
|Math.floor(%s)|取下整数()|整数型|面向过程|返回小于或等于 x 的最大整数（向下取整）。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取上整数()|``| `数值型` | ``| 4.7 返回 4 |
|Math.round(%s)|取四舍五入()|数值型|面向过程|返回 x 四舍五入后的整数。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取下整数()|``| `数值型` | ``| 4.5 返回 5 ，4.4 返回 4 |
|Math.trunc(%s)|取整数()|整数型|面向过程|返回 x 的整数部分（去除小数部分）。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取四舍五入()|``| `数值型` | ``| 4.9 返回 4 |
|Math.sin(%s)|取正弦值(Math.PI / 2)|数值型|面向过程|Math.sin(x) 返回 x 的正弦值（x 为弧度）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取整数()|`Math.PI / 2`| `数值型` | `Math.PI / 2`| Math.PI / 2 返回 1 |
|Math.cos(%s)|取余弦值(Math.PI)|数值型|面向过程|Math.cos(x) 返回 x 的余弦值（x 为弧度）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取正弦值(Math.PI / 2)|`Math.PI`| `数值型` | `Math.PI`| Math.PI 返回 -1 |
|Math.random()|取随机小数()|数值型|面向过程|Math.random() 返回一个 0 到 1 之间的伪随机数（包括 0，不包括 1）。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|(function(min, max) {return Math.floor(Math.random() * (max - min + 1)) + min})(%s, %s)|取随机数(1,100)|整数型|面向过程|获取两个数之间的一个随机数值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取随机小数()|`1`| `整数型` | `1`| 要得到的最小值 ||取随机小数()|`100`| `整数型` | `100`| 要得到的最大值 |
|Math.hypot(%s - %s, %s - %s)|取两点距离(,,,)|数值型|面向过程|使用 Math.hypot 可以方便地计算两点之间的欧几里得距离：|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取随机数(1,100)|``| `数值型` | ``| 对象2的x坐标 ||取随机数(1,100)|``| `数值型` | ``| 对象1的x坐标 ||取随机数(1,100)|``| `数值型` | ``| 对象2的y坐标 ||取随机数(1,100)|``| `数值型` | ``| 对象1的y坐标 |
|Date.now()|取时间戳()|数值型|面向过程|返回13位时间戳|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |

======上面组件库结束======

##使用说明:

当命令有 ""开头 则最后有 !! 命令形成闭环，闭环中不允许将`响应数据ref`和`事件接口`部分写到这里。

```墨香中文编程 
!!ELM_滑块_创建(参数一,参数二,参数三)
//这里是其他组件插槽
""ELM_滑块_创建结束
```
###代码规则
####在代码下一行添加注释 例如://这是注释内容，这一行可以换成真实注释。
#### 禁止方法`ELM_上传_创建()`的参数换行!
###代码使用案例
```墨香中文编程 
!!ELM_上传_创建('http://api.example.com/upload', #ELM_上传_请求方法_POST, 数据.请求头, 数据.上传文件列表, 假, 假, 数据.上传字段名, 假, true, , , &事件上传成功, &事件上传失败, , , , 1, 真, 真, 'image/*', , , #ELM_上传_列表类型_PICTURE_CARD, '', 数据.上传样式, 当前.名称)

""ELM_上传_创建结束()
```
##规则二
###如果命令中例如：ELM_xx()，命令前面并没有开头则表示普通方法命令，不需要结束语句闭环。
###普通方法参数也必须在一行不允许换行，例如:

```墨香中文编程 
ELM_按钮_创建('','',false,false,false,false,false,false,'button','','', ,'','墨香中文编程')
```

##如果执行的命令的`实例化对象父亲` 不是面相过程，则为实例类对象，则根据`实例化对象父亲`为面相过程的命令中的`实例化对象类型` 一样值的命令来创建返回变量
###例如 let 网站=网站_初始化(80)；网站.执行SQL(,,,) 这样调用才可以。
###例如 let 房间=网站_初始房间()；房间.加入房间(%s,%s); 这样调用才可以。

##方法或子程序构造
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
输出在单独代码框

```墨香中文编程 
231000子程序名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中公开方法名文本型这个是类里面的公开方法名，因为公开属性已经点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)

```


##类的构造
输出在单独代码框

###以下代码是一个完整的类构造
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
```墨香中文编程 
171000类名备注18|6|4|421|2-3-4
170100类方法类备注，这里可以描述这个类的作用。
121100变量名类型公开备注1|2|3|4
120000类里面的私有变量名文本型这个没有公开的变量，仅允许在当前类里面使用
120000类里面的公开变量名数值型这个公开的，可以通过类实例化后外部调用

231000方法名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中私有方法名文本型这个是类里面的私有方法名，因为公开属性没有点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
变量名称二.名称 = '名称'
变量名称二.等级 = 450
变量名称二.属性 = {}
变量名称二.属性.shengming
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)

231000子程序名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中公开方法名文本型这个是类里面的公开方法名，因为公开属性已经点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)


```

